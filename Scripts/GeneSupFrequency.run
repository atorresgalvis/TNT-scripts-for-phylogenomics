silent = all;
macro - ; 
macro [ 10000  ;
macro * 10 12000 ; 
macro = ;
					/* HELP AT THE END OF THE FILE */
taxn [ 30 ;
cls ; clbuffer ;
report - ;
macreport = ;
silent = all ;
 
var: zhelped a b;
set zhelped 0 ; set a argnumber ; set b $cualquiera; set b $%1 ;
if (('a' == 1) && (isinstring [ $b help ])) 
	goto = %0 ;	goto AYUDA ;
end
if ('zhelped' == 1)
	silent - all ;
	procedure / ;
end

if ( nchar == - 1 ) 
	errmsg No dataset in memory. Please read the dataset, the reference tree and the gene trees before running this script  ;
	proc/; 
end
if ( ntrees == - 1 ) 
	errmsg No trees in memory. Please load reference and gene trees in memory before running this script  ;
	proc/; 
end
loop 0 ntax
 if (!(isintree[0 #1]))
  errmsg Reference tree should include all taxa (Taxon #1 is not in reference tree) ;
  proc/; 
 end
stop 
 


 macreport- ; 
sil-all;
var:  bloque                                caca
      ctos                                  ctos_sp 
      cual                                  dde 
      dofile                                fin 
      fin_y                                 incompat 
      min_occu_bl                           min_occu_sp 
      nodo                                  nuact 
      occu                                  occu_bl 
      occu_comp                             occu_sp
      pace_x                                pace_y 
      patib                                 pos 
      pos_x                                 pos_y 
      ppio_y                                qbloc
      quiera                                star 
      star_b                                star_x
      star_y                                total 
      tot_hig                               tot_width
      bl_name[100]                          
      clades_sx_gen[(nblocks+1)]
      clades_sx_gen_patib[(nblocks+1)]
      gen_sg_c_patib[ ( (2*(ntax+1)) - 1) ] 
      genes_sg_clade[ ( (2*(ntax+1)) - 1)  ]
      nodero[ ( (2*(ntax+1)) - 1)  ] 
      ord_genes_sg_clade[ ( (2*(ntax+1)) - 1)  ] 
      ord_clades_sx_gen [(nblocks+1)]
      robin 				    besrob 
      minrobin 				    orig_out
      done 				    elout
      diente sis
      ;
tables / 7 ;

macfloat 7 ; 
if ( nblocks != ntrees ) 
   set bloque nblocks ; 
   set total ntrees   ; 
   errmsg Number of trees ('total') is not coincident with number of genes ('bloque') + 1 . To run this script include the reference
   tree as the first tree in memory, and one tree for each gene in the dataset. ; 
end
set orig_out outgroup ; 

silent - all ;
warn- ; 

set star_x 100 ; set star_y 115 ; set pace_x 16 ; set pace_y 17 ; 
set tot_width nblocks * 'pace_x' + 'star_x' + 250 ; 
set tot_hig (ntax + 1 ) * 'pace_y' + 'star_y' + 250 ;  
loop 1 nblocks  
	set clades_sx_gen [#1]  0  ; 
	set ord_clades_sx_gen [#1] 0 ; 
stop   
loop 1 ((2*(ntax+1)) - 2)
	set genes_sg_clade[#1]  0  ; 
	set ord_genes_sg_clade [#1] 0 ; 
stop


macreport - ;
sil=all; 
set caca (-1) ; 


set done 0 ;  
set diente firstdes[0 root] ; 



if ('diente' < root) 
  out 'diente' ;
  set done 1 ; 
  reroot ; 
else
 loop 0 (nodfork [ 0 root]) 
   set sis sister[0 'diente']  ; 
   if ('sis' < root )
    out 'sis' ; 
    set diente 'sis' ; 
    reroot ;
    set done 1 ; 
    endloop ;  
   end  
 stop 
end

if ('done' == 0 ) 
 reroot ; 
end 
set elout outgroup ;  



set minrobin 1000 ; 
macfloat 5 ; 
loop 1 nblocks
   if (!(isintree[#1 outgroup ]))
     loop=ter 0 (root-1)
        if (isintree[#1 #ter]) 
          outgroup #ter ; 
     	  reroot #1 ;     
     	end
     	set robin rrfdist 0/#1 ; 
      
     	if ('robin' < 'minrobin')
     	 set minrobin 'robin' ; 
     	 set besrob #ter ; 
     	end 
     	quote #1 'robin' 'minrobin' 'besrob' ; 
      stop sil=all;
      out 'besrob' ; 
      reroot #1 ; 
    end
    out 'orig_out'; 
stop    

loop 0 nblocks
	set nodero grptogrp #1 0 ;
	if (#1 == 0) 
		set clades_sx_gen[#1] 'caca'  ;
		continue ; 
	end
	loop 0 (nnodes [0])
		if  (#2 <= root)   
			set genes_sg_clade[#2] 'caca' ; 
			continue ; 
		end
		if ('nodero[#2]'!= -1)
			set clades_sx_gen [ #1 ] ++ ;   
			set genes_sg_clade [ #2 ] ++ ; 
		else
			set nuact simgroup [0 #2 #1] ; 
			if ('nuact' != 0) 
				set cual regalfa ; 
				set quiera regr ; 
				if ( ('cual' == 0) && ('quiera' == 0)) 
					set clades_sx_gen  [ #1 ] ++ ;   
					set genes_sg_clade [ #2 ] ++ ; 
					set gen_sg_c_patib [ #2] ++ ; 
					set clades_sx_gen_patib [ #1 ] ++ ;
				end
			end    
		end
	stop
stop
set ord_clades_sx_gen  sortlist  [clades_sx_gen  (nblocks + 1 ) ]; 
set ord_genes_sg_clade sortlist  [genes_sg_clade (nnodes[0]+1) ];
lquote = ; 
lquote [ ; 
silent = all ; 
log GSF_plot.svg ; 
silent - file ; 
quote <svg width=&34  'tot_width'&34  height= &34 'tot_hig' &34  xmlns=&34 http://www.w3.org/2000/svg&34> &10 ;
set ctos  0 ; 


/*Print gene names*/
set pos_y 'star_y' - 2 ; 
loop  nblocks 1 
	set bloque  'ord_clades_sx_gen[#1]' ; 
	set bl_name $$block 'bloque' ;
	set pos_x  'star_x' + ('pace_x' * 'ctos' ) ;   
	set occu_sp 'clades_sx_gen['ord_clades_sx_gen[#1]']' ; 
	set occu_sp ('occu_sp'/(((nnodes[0]-root) )) * 100) ; 
	macfloat 1 ; 
	quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 > 'ord_clades_sx_gen[#1]'_$bl_name  &32&32  ('occu_sp') </text> &10 ; 
	macfloat 7 ; 
	set ctos ++ ; 
stop 


/*Print horizontal bars*/
set pos_y 'star_y'  ;
set star_b 'pos_x' + 10 ;  
set pos_x 'star_b' + 200 ; 
quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 >  100 &37  </text> &10 ; 
quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'pos_x' &34&32 y2=&34 'pos_y'&34&32 stroke=&34 black&34&32 stroke-width=&34 2&34&32/> &10 ; 
set pos_x 'star_b' + 100 ;
quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 >  0 &37  </text> &10 ; 
set occu_sp 'pos_y' + ( (nnodes[0]-root) * 'pace_y') ;  
quote <line x1=&34 'pos_x'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'pos_x'&34&32 y2=&34 'occu_sp'&34&32 stroke=&34 black&34&32 stroke-width=&34 2&34&32/> &10; 
set star_b 'star_b' + 100 ;
set total 100 ; 
set pos_y 'pos_y' + ('pace_y' / 2 ) ; 
loop nnodes[0] (root+1)
	set nodo 'ord_genes_sg_clade[#1]' ;
	set occu_sp   'genes_sg_clade [ 'nodo']' ; 
	set occu_comp 'gen_sg_c_patib [ 'nodo']' ; 
	set incompat (nblocks) - ('occu_sp' ) ;
	set incompat ('incompat' / (nblocks)) * 100 ; 
	set pos_x 'star_b' - 'incompat' ;
	quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'pos_x'&34&32 y2=&34 'pos_y'&34&32 stroke=&34 red&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set incompat ('occu_sp' / nblocks) * 100 ; 
	set pos_x 'star_b' + 'incompat' ;
	quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'pos_x'&34&32 y2=&34 'pos_y'&34&32 stroke=&34 green&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set ppio_y 'occu_comp' ; 
	set ppio_y ('ppio_y' / nblocks) * 100 ; 
	set ppio_y 'pos_x' - 'ppio_y' ;      
	quote <line x1=&34 'pos_x'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'ppio_y'&34&32 y2=&34 'pos_y'&34&32 stroke=&34 yellow&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set pos_y 'pos_y' + 'pace_y' ;  
stop  
set ctos_sp 0 ;
set star_b 'star_x' - 10 ; 
set dde 0 ;
silent - file ;


/*Print  squares*/
loop nblocks 1 
	set bloque 'ord_clades_sx_gen[#1]' ; 
	set pos_x 'star_b' + ('pace_x' * 'dde') ;
	set nodero grptogrp 'ord_clades_sx_gen[#1]' 0 ;
	set ctos_sp 0 ; 
	loop nnodes[0] (root+1) 
		set nodo 'ord_genes_sg_clade[#2]' ; 
		set pos_y  'star_y' + ('pace_y' * 'ctos_sp') ; 
		if ('nodero['nodo']'!= -1)
			quote <rect x=&34 'pos_x'&34&32y=&34 'pos_y'&34&32width=&34 15&34&32height=&34 15&34&32style=&34fill:green&34 />   &10 ;
		else
			set nuact simgroup [0 'nodo' 'ord_clades_sx_gen[#1]'] ; 
			if ('nuact' !=0) 
				set cual regalfa ; 
				set quiera regr ; 
				if (('cual' == 0) && ('quiera' == 0)) 
					quote <rect x=&34 'pos_x'&34 &32y=&34 'pos_y'&34&32width=&34 15&34&32 height=&34 15&34&32style=&34fill:yellow&34 />   &10 ;
				else
					quote <rect x=&34 'pos_x'&34 &32y=&34 'pos_y'&34&32width=&34 15&34 &32height=&34 15&34&32style=&34fill:red&34 />   &10 ;
				end
			else
				quote <rect x=&34 'pos_x'&34 &32y=&34 'pos_y'&34 &32 width=&34 15&34&32 height=&34 15&34&32style=&34fill:red&34 />   &10 ;  
			end    
		end
		set ctos_sp ++ ;
	stop
	set dde ++ ; 
stop
set bloque 'star_y' - 2 ; 
set ctos 'pos_x' + 145 ; 
quote <text x=&34 'ctos'&34 &32y=&34 'bloque'&34&32 font-size=&34 12&34&32 >  Present </text> &10 ; 
set ctos 'pos_x' + 45 ; 
quote <text x=&34 'ctos'&34 &32y=&34 'bloque'&34&32 font-size=&34 12&34&32 >  Not Present </text> &10 ; 
set ctos 'ctos' - 17 ; 
quote <text x=&34 'ctos'&34 &32y=&34 'bloque'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'ctos','bloque')&34 >  100 &37  </text> &10 ; 
set ctos_sp 0 ;
set star_y 'star_y' + 12 ; 


/*Print nodes*/
loop nnodes[0]  (root + 1 )
	set bl_name $Node 'ord_genes_sg_clade[#1]' ;
	set pos_y  'star_y' + ('pace_y' * 'ctos_sp' )  ; 
	set occu_sp 'genes_sg_clade['ord_genes_sg_clade[#1]']' ; 
	set occu_sp  (('occu_sp'/nblocks) * 100) ; 
	macfloat 1 ; 
	quote <text x=&34 5&34&32y=&34 'pos_y'&34&32  font-size=&34 12&34 > ('occu_sp') &32 $bl_name  </text> &10 ;  
	macfloat 7 ; 
	set ctos_sp ++ ;
stop


/*Print vertical bars*/
set pos_y 'pos_y' +  120 ;
set star_b 'star_b' - 3 ;  
set pos_x 'pos_x' + 17 ; 
quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'pos_x' &34&32 y2=&34 'pos_y'&34&32 stroke=&34 black&34&32 stroke-width=&34 2&34&32/> &10 ; 
set dde 'star_b' - 20 ; 
quote <text x=&34 'dde'&34&32y=&34 'pos_y'&34&32  font-size=&34 12&34 > &32 0&37 </text> &10 ;
set pos_y 'pos_y' - 100 ;
set dde 'star_b' - 30 ;
quote <text x=&34 'dde'&34&32y=&34 'pos_y'&34&32  font-size=&34 12&34 > &32 100&37  </text> &10 ;  
set occu_sp 'pos_y' + 200 ;  
quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'star_b'&34&32 y2=&34 'occu_sp'&34&32 stroke=&34 black&34&32 stroke-width=&34 2&34&32/> &10 ; 
set occu_sp 'occu_sp' + 10 ;
quote <text x=&34 'dde'&34&32y=&34 'occu_sp'&34&32  font-size=&34 12&34 > &32 100&37 </text> &10 ;  
set occu_sp 'pos_y' +70  ; 
set ctos 'star_b' - 10 ; 
quote <text x=&34 'ctos'&34 &32y=&34 'occu_sp'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-90,'ctos','occu_sp')&34 >  Present   </text> &10 ; 
set occu_sp 'pos_y' +190  ; 
quote <text x=&34 'ctos'&34 &32y=&34 'occu_sp'&34&32 font-size=&34 12&34&32 transform=&34 rotate (-90,'ctos','occu_sp')&34 >  Not Present  </text> &10 ; 
set star_b 'star_b' + 3 + 8 ;
set pos_y 'pos_y' + 100 ;
set occu_sp 'pos_y' + 50 ; 
set total 100 ; 
loop nblocks 1 
	set bloque 'ord_clades_sx_gen[#1]' ; 
	set occu_sp   'clades_sx_gen [ 'bloque']' ; 
	set occu_comp 'clades_sx_gen_patib [ 'bloque']' ; 
	set incompat (nnodes[0]-root) - ('occu_sp' ) ; 
	set incompat ('incompat' / (nnodes[0]-root)) * 100 ; 
	set fin_y 'pos_y' + 'incompat' ;
	quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'star_b'&34&32 y2=&34 'fin_y'&34&32 stroke=&34 red&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set incompat ('occu_sp' / (nnodes[0]-root)) * 100 ; 
	set fin_y 'pos_y' - 'incompat' ;
	quote <line x1=&34 'star_b'&34&32 y1=&34 'pos_y'&34&32 x2=&34 'star_b'&34&32 y2=&34 'fin_y'&34&32 stroke=&34 green&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set ppio_y 'occu_comp' ; 
	set ppio_y ('ppio_y' / (nnodes[0]-root)) * 100 ; 
	set ppio_y 'ppio_y' + 'fin_y' ;  
	quote <line x1=&34 'star_b'&34&32 y1=&34 'ppio_y'&34&32 x2=&34 'star_b'&34&32 y2=&34 'fin_y'&34&32 stroke=&34 yellow&34&32 stroke-width=&34 6&34&32/> &10 ; 
	set star_b 'star_b' + 16 ;  
stop

quote </svg>   &10 ;  
log/;
lquote - ; 


/*Print tree with frequencies on branches*/
ttags * 0 ; 
macfloat 1 ; 
loop=tot (ntax + 1) (nnodes[0])
	if (#tot == root ) continue ; end ; 
	set total (('genes_sg_clade[#tot]'/ nblocks ) * 100) ;
	set patib 'total' - (('gen_sg_c_patib[#tot]'/ nblocks ) * 100) ;
	ttags +#tot Nd=#tot\'total'|'patib' ; 
stop
ttags &GSF_tree.svg bheight 40   legup 10   txtsep 20  blength 80 ; 

silent - all ; 
if (!'done')
  quote Warning ! Reference tree was rooted in an internal branch. Tree re-rooted in taxon 'elout' ;  
end  
quote Done! Results in GSF_plot.svg and GSF_tree.svg ; 

macfloat 7 ; 
log / ;
report = ;
 
procedure / ; 


label AYUDA ;
lquote = ; lquote [ ;
silent - all ;
/* =======================  HELP  ======================= */	
cls ; clbuffer ;
quote
&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61
TNT script:  GeneSupFrequency.run                                                              
Updated:     2021-01-12.                                                                 
Author:      Santiago A. Catalano, Ambrosio Torres and Pablo A. Goloboff.                                                        
Mantainer:   Santiago A. Catalano. <sacatalano@gmail.com>                              
Depends:     TNT version 1.5 
             (Goloboff and Catalano, 2016. doi: 10.1111/cla.12160).      
License:     GPL (3). Citation: Torres et al. 2021 (Cladistics)                          
Description: Given a reference tree, the script calculates the 
             percentage of individual gene trees that display, or are 
             compatible with, each group of the reference (e.g. a tree 
             based on concatenation). Some authors refer to this measure 
             as Gene Support Frequency (GSF, Gadagkar et al., 2005&59 
             Salichos et al., 2014). The reference tree must include all 
             terminals. For incomplete gene trees, the script counts (a) 
             those groups in the reference tree that are present in each 
             gene tree with the exact species composition (“explicit” 
             agreement), or (b) those groups that become identical once 
             the taxa missing in the gene tree are pruned from the 
             reference tree (“implicit” agreement). Users must read into 
             TNT the dataset, the reference tree and the gene trees, in 
             that specific order, before running the script. The script 
             takes no arguments. This script generates two output files. 
             i) an SVG file (named “GSFtree.svg”) with GSF frequencies 
             plotted on the branches of the reference tree. Tags above 
             branches indicate node numbers (for cross-reference with 
             GSFplot.svg). Values of GSF are shown below the branches as 
             two values, implicit GSF first, explicit GSF second. Keep 
             in mind that these numbers are approximate, as combining 
             trees with different taxon sets can lead to problems (see 
             Goloboff and Pol, 2002&59 Goloboff and Szumik, 2014). ii) a 
             svg file (named “GSFplot.svg”) including a color-coded 
             matrix that shows the groups of reference tree 
             present/absent in each gene tree. Green color represents a 
             group with explicit agreement, yellow represents a group 
             with implicit agreement, and red represents a group of 
             reference tree that is contradicted or resolved as a 
             polytomy in the gene tree. In addition, the SVG file 
             includes stacked bar plots showing the percentage of nodes 
             of the reference tree that are present in each gene tree 
             (vertical bars) and the percentage of gene trees displaying 
             each group of the reference tree (horizontal bars). N.B. If 
             the reference tree is rooted in an internal branch, the 
             script automatically reroots the reference tree with taxon 
             0 (default outgroup in TNT). Gene trees that do not include 
             the outgroup taxa are rooted considering the outgroup that 
             minimizes the Robinson-Foulds distance with the reference 
             tree.                                                          
Usage:       run GeneSupFrequency.run &59                                                                        
&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61
&10;
lquote - ;
silent = all ;
if (windows)
else
	view ;
end
set zhelped 1 ;
procedure / ;
/* ==================================================================== */








