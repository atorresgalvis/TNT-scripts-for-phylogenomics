macro - ;
macro [ 20000 
macro * 20 60000 ;
macro = ;
					/* HELP OF THE SCRIPT AT THE END OF THE FILE */
var: ancho           alto 
     arbotrees       nom_bloc 
     color
     contargs        fuera 
     grafo [10]      helped
     maximo          minimo 
     nome[100]       normal
     pos_x           pos_y 
     pos_x2          pos_y2 
     pos_x3          pos_y3 
     pos_x4          pos_y4 
     progre          repliquillas
     stratos         tipo [10]
     valorete        zparce [10]
     ordenes[10000]  valores[10000]  
     valorden[10000] 
     ;
report - ; 
macreport - ;
silent = all ; cls ; clbuffer ;

goto [%0 ERRORES ; 

set tipo $rf ;
set grafo $yes ;
set nom_bloc 0; 

silent - all ;
if (!argnumber)
else
	set helped 0 ;
	if ((argnumber == 1) && (eqstring [ %1 help ])) 
		goto = %0 ;
		goto AYUDA ;
	end
	if ('helped' == 1)
		macreport - ;
		report = ;
		macro - ;
		silent - all ;
		procedure / ;
	end
	lquote = ; lquote [ ;
	quote WARNING: keep in mind that the script TreeDistMatrix.run has three optional arguments (type, graph and names).&10 ;
	quote &32         Every word or number other than the allowed arguments and options will be skipped during the execution.&10 ;
	quote &32         Be sure that you are running the script properly (use &34run TreeDistMatrix&46run help&59&34&32 for help).&10 ;
	quote &10 ;
	lquote - ;
	set contargs 0 ;
	loop=parseo 1 argnumber
		if ('contargs' > 2)
			endloop ;
		else	
			if ( eqstring [ %(#parseo) type ] )
				set zparce #parseo + 1 ;
				if ( (eqstring [ %('zparce') sprm ]) | (eqstring [ %('zparce') sprd ]) | (eqstring [ %('zparce') rf ]) | (eqstring [ %('zparce') dc ])) 
					set tipo $%('zparce') ;
					set contargs ++ ;
				else
					lquote = ; lquote [ ;
					errmsg &10&10 ERROR: option &34%('zparce')&34&32 is not valid for the argument type. Valid options are &34sprm&34, &34sprd&34, &34rf&34&32 or &34dc&34. &10
					&32 &32 &32 &32 &32 &32 &32  Use &34run TreeDistMatrix&46run help&59&34&32 for help. &10&10 ;
					lquote - ;
				end
			else 
				if ( eqstring [ %(#parseo) graph ] )
					set zparce #parseo + 1 ;
					if ( (eqstring [ %('zparce') yes ]) | (eqstring [ %('zparce') no ]))
						set grafo $%('zparce') ;
						set contargs ++ ;
					else
						lquote = ; lquote [ ;
						quote &32WARNING: option &34%('zparce')&34&32 is not valid for the argument graph. Valid options are &34yes&34&32 or &34no&34. &10;
						quote &32 &32 &32 &32 &32 &32 &32 &32 &32 &32Hence, running the script producing the graphical output&46 &10 ;
						quote &32 &32 &32 &32 &32 &32 &32 &32 &32 &32Use &34run TreeDistMatrix&46run help&59&34&32 for help. &10&10 ;
						lquote - ;
					end
				else
					if ( eqstring [ %(#parseo) names ] )
						set zparce #parseo + 1 ;
						if ( (eqstring [ %('zparce') yes ]) | (eqstring [ %('zparce') no ]))
							set contargs ++ ;
							if (eqstring [ %('zparce') yes ])
								set nom_bloc 1;
							end
						else
							lquote = ; lquote [ ;
							quote &32WARNING: option &34%('zparce')&34&32 is not valid for the argument names. Valid options are &34yes&34&32 or &34no&34. &10;
							quote &32 &32 &32 &32 &32 &32 &32 &32 &32 &32Hence, producing output files without names of the blocks&46 &10 ;
							quote &32 &32 &32 &32 &32 &32 &32 &32 &32 &32Use &34run TreeDistMatrix&46run help&59&34&32 for help. &10&10 ;
							lquote - ;
						end
					end
				end	
			end
		end
	stop   
end
if ( nchar == - 1 ) 
	errmsg No dataset in memory. Please read the dataset, the reference tree and the gene trees before running this script  ;
end
if ( ntrees == - 1 ) 
	errmsg No trees in memory. Please load reference and gene trees in memory before running this script  ;
end
silent = all ;
set arbotrees ntrees ;
outgroup 0 ; reroot ; collapse - ;
set fuera outgroup ;
set minimo 0 ;
set maximo	0.1 ;

macfloat 0 ;
if (ntax <= 10) set repliquillas ntax ; set stratos 5 ; else
	if ( (ntax > 10) && (ntax <= 50)) set repliquillas (ntax * 1.2) ; set stratos 10 ; else
		if ( (ntax > 50) && (ntax <= 100)) set repliquillas (ntax * 1.3) ; set stratos 25 ; else
			if ( (ntax > 100) && (ntax <= 250)) set repliquillas (ntax * 1.4) ; set stratos 50 ; else
				if ((ntax > 250)) set repliquillas (ntax * 1.5) ; set stratos 75 ; else
				end
			end
		end
	end			
end
if (eqstring [ yes $grafo ] )
	loop=filas 0 ntrees
		loop=colus 0 ntrees
			loop 0 ntax
				if (isintree [#colus 'fuera'])
					endloop ;
				else
					set fuera ('fuera' + 1) ;
					outgroup 'fuera' ;
					reroot ;
				end
			stop
			if (eqstring [ sprm $tipo ] )
				set valores[#colus] sprdiff [#filas #colus 'repliquillas'x'stratos'] ;
			else
				if (eqstring [ sprd $tipo ] )
					set valores[#colus] 1- sprsim [#filas #colus 'repliquillas'x'stratos'] ;
				else
					if (eqstring [ rf $tipo ] )
						set valores[#colus] rfdist #filas / #colus ;
						if ('valores[#colus]' == 1000)
							set valores[#colus] 0 ; 
						end
					else
						if (eqstring [ dc $tipo ] )
							set valores[#colus] symcoeff #filas / #colus ;
						end
					end
				end
			end
			macfloat * ;
			macfloat 3 ;
			if ('valores[#colus]' > 'maximo')
				set maximo 'valores[#colus]' ;
			end
			if ((#filas == 0) && (#colus != 0))
				set valorden[#colus] ('valores[#colus]' + 1);
			end
			macfloat 0 ;
		stop
	stop
end

set valorden[0] 0;
set ordenes sortlist [valorden (ntrees + 1) ];
outgroup 0 ; reroot ; collapse - ;
set fuera outgroup ;

log TreeDistanceMatrix.csv ;
lquote = ; lquote [ ;
silent - file ;
quote &44 ;
loop 0 ntrees
	if ('ordenes[#1]' == 0)
		quote RefTree&44 ;
	else
		if(!'nom_bloc')
			if (tsize [0] == tsize ['ordenes[#1]'])
				quote 'ordenes[#1]'&44 ;
			else
				quote 'ordenes[#1]'&42&44 ;
			end
		else
			if (tsize [0] == tsize ['ordenes[#1]'])
				quote $block'ordenes[#1]' &44 ;
			else
				quote $block'ordenes[#1]' &42&44 ;
			end
		end
	end
stop
quote &10 ;
silent = file ;
lquote - ;
log / ;

if (eqstring [ yes $grafo ] )
	log TreeDistanceMatrix.svg ;
	lquote = ; lquote [ ;
	silent - file ;
	set ancho ((((ntrees +1) *500)/11) + 10) ;
	set alto  ((((ntrees+1) *500)/11) + 69) ;
	if (ntrees < 6) set ancho 'ancho' + 89; set alto 'alto' + 25; end 
	quote <svg width=&34  'ancho' &34  height= &34 'alto' &34  xmlns=&34 http://www.w3.org/2000/svg&34> &10 ;
	set pos_y 105 ;
	set pos_x2 5 ;
	set pos_x  90 ;
	set pos_y2 97 ;
	loop  0 ntrees
		set valorete tsize ['ordenes[#1]'] ;
		set pos_x  'pos_x' + 30 ; 
		set pos_y2  'pos_y2' + 30 ; 
		if ('ordenes[#1]' == 0)
			set nome $RefTree ;
			quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y' &34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 > $nome  &32 &40 'valorete'&41</text> &10 ;
			quote <text x=&34 'pos_x2'&34 &32y=&34 'pos_y2' &34&32 font-size=&34 12&34 > $nome  &32 &40 'valorete'&41</text> &10 ; 
		else
			if (!'nom_bloc')
				set nome $Tree ;
				quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y' &34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 > $nome &32 'ordenes[#1]' &32 &40 'valorete'&41</text> &10 ;
				quote <text x=&34 'pos_x2'&34 &32y=&34 'pos_y2' &34&32 font-size=&34 12&34 > $nome &32 'ordenes[#1]' &32 &40 'valorete'&41</text> &10 ; 
			else
				set nome $$block #1 ;
			    quote <text x=&34 'pos_x'&34 &32y=&34 'pos_y' &34&32 font-size=&34 12&34&32 transform=&34 rotate (-60,'pos_x','pos_y')&34 > $nome>\'ordenes[#1]' &32 &40 'valorete'&41</text> &10 ;
			    quote <text x=&34 'pos_x2'&34 &32y=&34 'pos_y2' &34&32 font-size=&34 12&34 > $nome>\'ordenes[#1]' &32 &40 'valorete'&41</text> &10 ; 
			end
		end	 
	stop
	silent = file ;
	lquote - ;
	log / ;
end	

set pos_x3 80 ;
set pos_x4 78 ;
loop=fila 0 ntrees
	loop=colu 0 ntrees
	loop 0 ntax
		if (isintree ['ordenes[#colu]' 'fuera'])
			endloop ;
		else
			set fuera ('fuera' + 1) ;
			outgroup 'fuera' ;
			reroot ;
		end
	stop
	macfloat 0 ;
	if (eqstring [ sprm $tipo ] )
		set valores['ordenes[#colu]'] sprdiff ['ordenes[#fila]' 'ordenes[#colu]' 'repliquillas'x'stratos'] ;
	else
		if (eqstring [ sprd $tipo ] )
			set valores['ordenes[#colu]'] 1- sprsim ['ordenes[#fila]' 'ordenes[#colu]' 'repliquillas'x'stratos'] ;
		else
			if (eqstring [ rf $tipo ] )
				set valores['ordenes[#colu]'] rfdist 'ordenes[#fila]' / 'ordenes[#colu]' ;
				if ('valores['ordenes[#colu]']' == 1000)
					set valores['ordenes[#colu]'] 0 ; 
				end
			else
				if (eqstring [ dc $tipo ] )
					set valores['ordenes[#colu]'] symcoeff 'ordenes[#fila]' / 'ordenes[#colu]' ;
				end
			end
		end
	end
	stop
	macfloat * ;
	macfloat 3 ;
	lquote = ; lquote [ ;
	log + TreeDistanceMatrix.csv ;
	silent - file ;
	if ('ordenes[#fila]' == 0)
		quote RefTree&44;
	else
		if (!'nom_bloc')	
			if (tsize [0] == tsize ['ordenes[#1]'])
				quote 'ordenes[#fila]'&44 ;
			else
				quote 'ordenes[#fila]'&42&44 ;
			end
		else
			if (tsize [0] == tsize ['ordenes[#1]'])
				quote $block'ordenes[#fila]' &44 ;
   	        else
				quote $block'ordenes[#fila]'&42&44 ;
			end
		end
	end
	loop=sano 0 ntrees
		quote 'valores['ordenes[#sano]']'&44 ;
	stop
	quote &10 ;
	silent = file ;
	macfloat 0 ;
	silent - console ;
	set progre (#fila / 'arbotrees') * 100 ;
	clbuffer ;
	quote Progress 'progre'&37&10 ;
	silent = console ;
	lquote - ;
	log / ;
	
	if (eqstring [ yes $grafo ] )
		lquote = ; lquote [ ;
		log + TreeDistanceMatrix.svg ;
		silent - file ;
		set pos_x3 'pos_x3' + 30 ;
		set pos_x4 'pos_x4' + 30 ;
		loop=incu  0 ntrees
			if (#incu == 0)
				set pos_y3  127 ;
				set pos_y4 	111;
			else
				set pos_y3  'pos_y3' + 30 ;
				set pos_y4  'pos_y4' + 30 ;
			end
			macfloat * ;
			macfloat 3 ;
			set normal ('valores['ordenes[#incu]']'-'minimo') / ('maximo'-'minimo') ;
			if ('normal' == 0 ) set color $1e9600 ; else
				if (('normal' > 0) && ('normal' < 0.1)) set color $52a800 ; else
					if (('normal' >= 0.1) && ('normal' < 0.2)) set color $7aba00 ; else
						if (('normal' >= 0.2) && ('normal' < 0.3)) set color $a1cc00 ; else
							if (('normal' >= 0.3) && ('normal' < 0.4)) set color $c8dd00 ; else
								if (('normal' >= 0.4) && ('normal' < 0.5)) set color $dcd600 ; else
									if (('normal' >= 0.5) && ('normal' < 0.6)) set color $eecf00 ; else
										if (('normal' >= 0.6) && ('normal' < 0.7)) set color $ffc700 ; else
											if (('normal' >= 0.7) && ('normal' < 0.8)) set color $ffa600 ; else
												if (('normal' >= 0.8) && ('normal' < 0.9)) set color $ff8200 ; else
													if (('normal' >= 0.9) && ('normal' < 1)) set color $ff5800 ; else
														if ('normal' == 1) set color $ff0000 ; else
														end
													end	
												end
											end
										end
									end
								end
							end
						end
					end								
				end
			end
			macfloat 2 ;
			quote <rect x=&34 'pos_x4'&34 &32y=&34 'pos_y4'&34&32width=&34 28&34&32 height=&34 28&34&32style=&34fill:&35 $color &34 />   &10 ;
			quote <text x=&34 'pos_x3'&34 &32y=&34 'pos_y3' &34&32 font-size=&34 12&34 > 'valores['ordenes[#incu]']' </text> &10 ; 
		stop
		silent = file ;
		lquote - ;
		log / ;
	end	
stop
if (eqstring [ yes $grafo ] )
	log + TreeDistanceMatrix.svg ;
	lquote = ; lquote [ ;
	silent - file ;
	quote </svg>   &10 ;
	silent = file ;
	lquote - ;
	log / ;
end	
silent - all ;
;
if (!argnumber)
	lquote = ; lquote [ ;
	quote WARNING: arguments of the script were not indicated by the user&46&10 ;
	quote The script was running with arguments by default &40type &61&32 rf and graph &61&32 yes&41&46 &10 ;
	quote Use &34run TreeDistMatrix&46run help&59&34&32 for help&46&10 &10;
	lquote - ;
else	
	lquote = ; lquote [ ;
	quote Running the script with at least one of the arguments indicated by the user &40type &61&32 $tipo and graph &61&32 $grafo&41&46 &10 ;
	lquote - ;	
end	
quote The script TreeDistMatrix.run was successfully run! ;
if(eqstring [ yes $grafo ] )
	quote Output files produced: TreeDistanceMatrix.csv and TreeDistanceMatrix.svg. ;
else
	quote Output files produced: TreeDistanceMatrix.csv. ;
end
quote Keeping in memory the reference tree (first tree in memory) and the gene trees. ;
silent = all ;
macreport - ;
report = ;
macro - ;
silent - all ;
procedure / ;


label AYUDA ;
lquote = ; lquote [ ;
silent - all ;
cls ; clbuffer ;
/* =======================  HELP OF THE SCRIPT  ======================= */	
quote
&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&10
TNT script:  TreeDistMatrix.run                                                              
Updated:     2021-03-09.                                                                 
Author:      Ambrosio Torres & Santiago A. Catalano                                                         
Mantainer:   Santiago A. Catalano. <sacatalano@gmail.com>                              
Depends:     TNT version 1.5 
             (Goloboff and Catalano, 2016. doi: 10.1111/cla.12160).      
License:     GPL (3). Citation: Torres et al. 2021 (Cladistics)                          
Description: Displays tree-distances calculated by TNT in the form of 
             distance matrix and/or heatmaps. Four different 
             tree-distance metrics are available: SPR moves, SPR 
             difference (Hein, 1990&59 Goloboff, 2007), normalized 
             Robinson-Foulds (Robinson and Foulds, 1981), and distortion 
             coefficient (Farris, 1973, modified to be symmetric&59 see 
             Goloboff et al., 2018: 411). Two output files are produced: 
             i) the distance matrix in CSV format (trees with fewer 
             terminals than the reference tree are indicated with "*" in 
             the file), and ii) a heatmap of distances in SVG format 
             (numbers in parentheses indicate numbers of terminals in 
             each tree). Before running the script, the user should read 
             the dataset, the reference tree (e.g. a tree based on 
             concatenation) and the rest of the trees (e.g. gene-trees), 
             in that specific order.                                                          
Usage:       run TreeDistMatrix.run type rf graph no names yes &59                  
Arguments:   type   (optional argument) type of distance matrix (&34sprm&34&32 
                    for SPR moves, &34sprd&34&32 for SPR difference, &34rf&34&32 for 
                    Robinson-Foulds metric [default] and &34dc&34&32 for distortion 
                    coefficient.)
             graph  (optional argument) produce the graphical output 
                    (Use &34yes&34&32 [default] or &34no&34&32 [saves a very considerable 
                    amount of time]).
             names  (optional argument) produce the output files with
			        names of the blocks. (Use &34yes&34&32 or &34no&34&32 [default]).
			        This option is valid when datasets contain the 
			        names of the blocks (e.g. genes).        
Notes:       the use of &34sprm&34&32 and &34sprd&34&32 is discouraged when more than 
             100 trees are compared (especially for trees with more than 
             100 terminals). As the number of terminals increases, &34sprm&34&32 
             and &34sprd&34&32 become more time-consuming than &34rf&34&32 and &34dc&34. 
             For example, without graphical output, the script takes 42 
             min to calculate &34sprm&34&32 for 50 trees of 144 terminals, while 
             for &34rf&34&32 and &34dc&34&32 it takes ~2 seconds. Including a reference 
             tree as the first tree in memory is not mandatory. However, 
             the first tree in memory will be always labeled in the 
             output files as the reference tree and the trees will be 
             ordered in the SVG file according to the distance 
             calculated against the first tree.                                                                        
&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61&61
&10;
lquote - ;
silent = all ;
set helped 1 ;
if(windows)
else
	view ;
end
procedure / ;
/* ==================================================================== */

label ERRORES 
silent - all ; 
report = ;
log / ; ;
procedure / ;
